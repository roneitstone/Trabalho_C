/*Universidade Federal do Rio de Janeiro
 *Escola Politecnica
 *Departamento de Eletronica e de Computacao
 *EEL270 - Computacao II - Turma 2020/1
 *Prof. Marcelo Luiz Drumond Lanza
 *Autor: Eduardo Bruno Martins Esperanca
 *Descricao: programa de testes com a main para a funcao mostrar monitor.
 *
 *$Author: eduardo.esperanca $
 *$Date: 2021/02/02 17:24:07 $
 *$Log: aula0702.c,v $
 *Revision 1.1  2021/02/02 17:24:07  eduardo.esperanca
 *Initial revision
 *
 */


#include "aula0701.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>
#include <time.h>

#define NUMERO_DE_ARGUMENTOS_INVALIDO 6
#define NUMERO_DE_ARGUMENTOS          4
#define END_OF_STRING                 '\0'
#define FINALIZADO                    0
#define ARGUMENTO_INVALIDO            2
#define DIMENSAO_EXCEDIDA             4
#define VALOR_FORA_DOS_PADROES        7
#define VALOR_MAXIMO_EXCEDIDO         1

int
protect (char *arg , unsigned int valor)
{
   double teste;
   char *verif;
   teste = strtod(arg, &verif);
   if ( strlen(arg) > 6)
   {
      return VALOR_MAXIMO_EXCEDIDO;
   }
   if ( teste > valor)
   {
      return VALOR_MAXIMO_EXCEDIDO;
   }

   return FINALIZADO;
}

int
main (int argc, char *argv[])
{
   unsigned int linha;
   unsigned int coluna;
   unsigned int linhas;
   unsigned int colunas;
   int random;
   int result = time(NULL);
   char *verif;

   useconds_t tempo;

   tipoErros verificador;

   tipoPixel monitor [NUMERO_MAXIMO_LINHAS][NUMERO_MAXIMO_COLUNAS];
   if ( argc != NUMERO_DE_ARGUMENTOS){
      printf ("\n\n Faltam argumentos, dimensoes incomaptiveis com dados . \n\n");
      return NUMERO_DE_ARGUMENTOS_INVALIDO;
   }

   if( argv[1][0] == '-' || argv[2][0] == '-' || argv[3][0] == '-')
   {
      printf ("\n\n Argumento Invalido \n\n");
      return ARGUMENTO_INVALIDO;
   }

   if ( strlen(argv[1]) > 3 || strlen(argv[2]) > 3 )
   {
      printf ("\n\n Argumento Invalido \n\n");
      return ARGUMENTO_INVALIDO;
   }

   linhas = strtoul(argv[1], &verif, 10);
   if ( *verif != END_OF_STRING)
   {
      printf ("\n\n Argumento Invalido \n\n");
      return ARGUMENTO_INVALIDO;
   }
   colunas = strtoul(argv[2], &verif, 10);
   if ( *verif != END_OF_STRING)
   {
      printf ("\n\n Argumento Invalido \n\n");
      return ARGUMENTO_INVALIDO;
   }
   if ( linhas > NUMERO_MAXIMO_LINHAS || colunas > NUMERO_MAXIMO_COLUNAS)
   {
      printf (" \n\n Dimensoes excedem os limites do programa \n\n");
      return VALOR_MAXIMO_EXCEDIDO;
   }

   tempo = strtoul ( argv[3], &verif,10);

   if ( *verif != END_OF_STRING)
   {
      printf ("\n\n Argumento Invalido \n\n");
      return ARGUMENTO_INVALIDO;
   }

   if ( protect (argv[3], tempo) != 0)
   {
      printf (" \n\n Valor maximo excedido \n\n ");
      return VALOR_MAXIMO_EXCEDIDO;
   }

   for ( linha = 0; linha < linhas; linha++)
   {
      for ( coluna = 0; coluna < colunas; coluna++)
      {

         if (result != (time_t)(-1))
         {
            random = time(NULL)*rand()%10 ;
         }
         if(random > 4 && random < 9)
         {
            monitor[linha][coluna] = aceso;

         }
         if(random <= 4 && random >= 0)
         {
            monitor[linha][coluna] = apagado;

         }
         if( random == 9)
         {
            monitor[linha][coluna] = defeituoso ;

         }
      }
   }

   verificador = MostrarMonitor (monitor , linhas, colunas,  tempo);

   if (verificador == linhaInvalida)
   {
      printf ("\n\n linha com valor invalido \n\n");
      return VALOR_FORA_DOS_PADROES;
   }


   return FINALIZADO;
}

/*$RCSfile: aula0702.c,v $*/
~
