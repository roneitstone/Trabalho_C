
 *Universidade Federal do Rio de Janeiro
 *Escola Politecnica
 *Departamento de Eletronica e de Computacao
 *EEL270 - Computacao II - Turma 2020/1
 *Prof. Marcelo Luiz Drumond Lanza
 *Autor: Eduardo Bruno Martins Esperanca
 *Descricao: Calcula o  complementar algebrico de uma matriz.
 *
 *$Author: eduardo.esperanca $
 *$Date: 2021/01/25 03:28:39 $
 *$Log: aula0606.c,v $
 *Revision 1.1  2021/01/25 03:28:39  eduardo.esperanca
 *Initial revision
 *
 */




#include <stdio.h>
#include "aula0601.h"
#include <stdlib.h>
#include <string.h>

#define NUMERO_DE_ARGUMENTOS_INVALIDO 3
#define END_OF_STRING                 '\0'
#define FINALIZADO                    0
#define ARGUMENTO_INVALIDO            2
#define DIMENSAO_EXCEDIDA             4
#define VALOR_FORA_DOS_PADROES        7
#define VALOR_MAXIMO_EXCEDIDO         1
#define COLUNA_LINHA_INCOMPATIVEL     5

int
protetor (double arg)
{
   if( arg == INFINITO || arg == NEGINFINITO)
   {
      return VALOR_MAXIMO_EXCEDIDO;
   }

   return 0;
}

int
main (int argc, char *argv[])
{
   double teste ;
   unsigned short ordem;
   unsigned short linhaE;
   unsigned short colunaE;
   double matriza [COLMAX][LINMAX];
   double determinante[2];
   int indexl, indexc;
   int seletor = 4;
   char *verif;

   tipoErros verificador;

   if( strlen(argv[1]) > 3  || strlen(argv[2]) > 3 || strlen(argv[3]) > 3)
   {
      printf (" \n\n Valor maximo excedido ! \n\n");
      return VALOR_MAXIMO_EXCEDIDO;
   }

   ordem  = strtol(argv[1], &verif, 10);

   if( *verif != END_OF_STRING )
   {
      printf (" \n\n Argumento invalido < %s > \n\n ", verif);
      return ARGUMENTO_INVALIDO;
   }


   linhaE = strtol(argv[2], &verif, 10);

   if( *verif != END_OF_STRING )
   {
      printf (" \n\n Argumento invalido < %s > \n\n ", verif);
      return ARGUMENTO_INVALIDO;
   }

   colunaE = strtol(argv[3], &verif, 10);

   if( *verif != END_OF_STRING )
   {
      printf (" \n\n Argumento invalido < %s > \n\n ", verif);
      return ARGUMENTO_INVALIDO;
   }

   if( ordem < colunaE || ordem < linhaE || linhaE < 1|| colunaE < 1)
   {
      printf ("\n\n Dimensoes excedendo a ordem !\n\n");
      return VALOR_FORA_DOS_PADROES;
   }

   if(ordem < 0 || ordem > LINMAX )
   {
      printf (" \n\n O numero precisa ser maior do que zero  ou menor que 100.\n\n");
      return VALOR_FORA_DOS_PADROES;
   }



   if(ordem*ordem != argc - 4)
   {
      printf ("\n\n Numero de argumentos invalido, dimensoes incorretas! \n\n");
      return NUMERO_DE_ARGUMENTOS_INVALIDO;
   }


   for (indexl = 0 ; indexl < ordem ; indexl++)
   {
      for ( indexc = 0 ; indexc < ordem ; indexc++)
      {
         teste = strtod (argv[seletor], &verif);
         if( *verif != END_OF_STRING )
         {
            printf (" \n\n Argumento invalido < %s > \n\n ", verif);
            return ARGUMENTO_INVALIDO;
         }

         if(protetor(teste) != 0)
         {
            printf ("\n\n Valor de double excedido !  \n\n");
            return VALOR_MAXIMO_EXCEDIDO;
         }

         matriza[indexl][indexc] = teste;
         seletor++;
      }
   }

   verificador = CalcularComplementoAlgebrico( ordem, linhaE, colunaE, matriza, determinante);
   if(verificador == incalculavel)
   {
      printf ("\n\n Impossivel calcular matriz desta ordem! \n\n");
      return VALOR_FORA_DOS_PADROES;
   }

   if (verificador == overF )
   {
      printf (" \n\n Limite de variavel excedido \n\n");
      return VALOR_MAXIMO_EXCEDIDO;
   }
   if (verificador == ok)
   {
      printf (" \n\n Complementar algebrico  = %f \n\n", determinante[1]);
   }

   return FINALIZADO;
}
/*$RCSfile: aula0606.c,v $*/
