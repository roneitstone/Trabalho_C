
/*
 *Universidade Federal do Rio de Janeiro
 *Escola Politecnica
 *Departamento de Eletronica e de Computacao
 *EEL270 - Computacao II - Turma 2020/1
 *Prof. Marcelo Luiz Drumond Lanza
 *Autor: Eduardo Bruno Martins Esperanca
 *Descricao: Calcula a multiplicacao entre duas matrizes.
 *
 *$Author: eduardo.esperanca $
 *$Date: 2021/01/25 18:39:47 $
 *$Log: aula0602.c,v $
 *Revision 1.2  2021/01/25 18:39:47  eduardo.esperanca
 *correcao de erros.
 *
 *Revision 1.1  2021/01/25 03:22:54  eduardo.esperanca
 *Initial revision
 *
 */




#include <stdio.h>
#include "aula0601.h"
#include <stdlib.h>
#include <string.h>

#define NUMERO_DE_ARGUMENTOS_INVALIDO 3
#define END_OF_STRING                 '\0'
#define FINALIZADO                    0
#define ARGUMENTO_INVALIDO            2
#define DIMENSAO_EXCEDIDA             4
#define VALOR_FORA_DOS_PADROES        7
#define VALOR_MAXIMO_EXCEDIDO         1
#define COLUNA_LINHA_INCOMPATIVEL     5

int
protetor (double arg)
{
   if( arg == INFINITO || arg == NEGINFINITO)
   {
      return VALOR_MAXIMO_EXCEDIDO;
   }

   return 0;
}

int
main (int argc, char *argv[])
{
   double teste ;
   unsigned short linhaA;
   unsigned short colunaA;
   unsigned short linhaB;
   unsigned short colunaB;
   double matriza [COLMAX][LINMAX], matrizb [COLMAX][LINMAX], resultado [COLMAX][LINMAX];
   int indexl, indexc;
   int seletor = 5;
   char *verif;
   tipoErros verificador;

   if( strlen(argv[1]) > 3 || strlen(argv[2]) > 3 || strlen(argv[3]) > 3 || strlen(argv[4]) > 3)
   {
      printf (" \n\n Valor maximo excedido ! \n\n");
      return VALOR_MAXIMO_EXCEDIDO;
   }

   linhaA = strtol(argv[1], &verif, 10);

   if( *verif != END_OF_STRING )
   {
      printf (" \n\n Argumento invalido < %s > \n\n ", verif);
      return ARGUMENTO_INVALIDO;
   }

   colunaA = strtol(argv[2], &verif, 10);

   if( *verif != END_OF_STRING )
   {
      printf (" \n\n Argumento invalido < %s > \n\n ", verif);
      return ARGUMENTO_INVALIDO;
   }

   linhaB = strtol(argv[3], &verif, 10);

   if( *verif != END_OF_STRING )
   {
      printf (" \n\n Argumento invalido < %s > \n\n ", verif);
      return ARGUMENTO_INVALIDO;
   }

   colunaB = strtol(argv[4], &verif, 10);
   if( *verif != END_OF_STRING )
   {
      printf (" \n\n Argumento invalido < %s > \n\n ", verif);
      return ARGUMENTO_INVALIDO;
   }

   if(linhaA > LINMAX || linhaB > LINMAX || colunaA > COLMAX || colunaB > COLMAX )
   {
      printf (" \n\n Excedeu o limite permitido de dimensao . \n\n ");
      return DIMENSAO_EXCEDIDA;
   }

   if(linhaA < 0 || linhaB < 0 || colunaA < 0 || colunaB < 0)
   {
      printf (" \n\n O numero precisa ser maior do que zero .\n\n");
      return VALOR_FORA_DOS_PADROES;
   }

   if ( colunaA != linhaB)
   {
      printf ("\n\n coluna X linha incompativel \n\n");
      return COLUNA_LINHA_INCOMPATIVEL;
   }
   indexl = linhaA * colunaA;
   indexl += linhaB * colunaB;

   if(indexl != argc - 5)
   {
      printf ("\n\n Numero de argumentos invalido, dimensoes incorretas! \n\n");
      return NUMERO_DE_ARGUMENTOS_INVALIDO;
   }



   for (indexl = 0 ; indexl < linhaA ; indexl++)
   {
      for ( indexc = 0 ; indexc < colunaA ; indexc++)
      {
         teste = strtod ( argv[seletor], &verif);
         if( *verif != END_OF_STRING )
         {
            printf (" \n\n Argumento invalido < %s > \n\n ", verif);
            return ARGUMENTO_INVALIDO;
         }

         if(protetor(teste) != 0)
         {
            printf ("\n\n Valor de double excedido !  \n\n");
            return VALOR_MAXIMO_EXCEDIDO;
         }

         matriza[indexl][indexc] = teste;
         seletor++;
      }
   }

   for (indexl = 0 ; indexl < linhaB ; indexl++)
   {
      for ( indexc = 0 ; indexc < colunaB ; indexc++)
      {
         teste = strtod ( argv[seletor], &verif);
         if( *verif != END_OF_STRING )
         {
            printf (" \n\n Argumento invalido < %s > \n\n ", verif);
            return ARGUMENTO_INVALIDO;
         }

         if(protetor(teste) != 0)
         {
            printf ("\n\n Valor de double excedido !  \n\n");
            return VALOR_MAXIMO_EXCEDIDO;
         }
         matrizb[indexl][indexc] = teste;
         seletor++;
      }
   }


   verificador = MultiplicarMatrizes(linhaA, colunaA, linhaB, colunaB, matriza, matrizb, resultado);

   if (verificador == overF )
   {
      printf (" \n\n Limite de leitura double excedido \n\n");
      return VALOR_MAXIMO_EXCEDIDO;
   }
   if (verificador == ok)
   {
      for (indexl = 0 ; indexl < linhaA ; indexl++)
      {
         for ( indexc = 0 ; indexc < colunaB ; indexc++)
         {
            printf (" %f ", resultado [indexl][indexc]);
         }
         printf ("\n");
      }
   }

   return FINALIZADO;
}
/*$RCSfile: aula0602.c,v $*/
