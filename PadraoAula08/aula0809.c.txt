[www02][                                                                                                                                                                                                                                                                                                                                                                            (0*$ bash)                                                                                                                                                                                                                                                                                                                                                                             ][03/09/21 12:31 PM]
/*Unversidade Federal do Rio de Janeiro
 *Escola Politecnica
 *Departamento de Eletronica e de Computacao
 *EEL270 - Computacao II - Turma 2020/1
 *Prof. Marcelo Luiz Drumond Lanza
 *Autor: Eduardo Bruno Martins Esperanca
 *Descricao: programa de testes com a main para a funcao DECODIFICAR 64BITS.
 *
 *$Author: eduardo.esperanca $
 *$Date: 2021/02/09 19:01:24 $
 *$Log: aula0809.c,v $
 *Revision 1.2  2021/02/09 19:01:24  eduardo.esperanca
 *correcao do nome da .h e nas importacoes, adequado ao roteiro.
 *
 *Revision 1.1  2021/02/09 00:22:32  eduardo.esperanca
 *Initial revision
 *
 */


#include "aula08.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define NUMERO_DE_ARGUME            '\n'
#define NUMERO_DE_ARGUMENTOS          4
#define END_OF_STRING                 '\0'
#define FINALIZADO                    0
#define ARGUMENTO_INVALIDO            2
#define DIMENSAO_EXCEDIDA             4
#define VALOR_FORA_DOS_PADROES        7
#define ERRO_DE_ESCRITA               1
#define TAMANHO_MAXIMO_LINHA          76
#define TAMANHO_MAXIMO                30000

int
converter (byte *codificado, char *value, unsigned long long len)
{
   int index;
   byte aux[2];
   int index2=0;
   for( index = 0; index < len ; index++)
   {
      aux[1] = codificado[index] & 0x0F;
      aux[0] = (codificado[index]>>4) & 0x0F;
      if ( aux[0] < 10 )
      {
         value[index2] = aux[0] + '0';
         index2++;
      }
      if ( aux[0] == 10 )
      {
         value[index2] = 'A';
         index2++;
      }
      if ( aux[0] == 11 )
      {
         value[index2] = 'B';
         index2++;
      }
      if ( aux[0] == 12 )
      {
         value[index2] = 'C';
         index2++;
      }
      if ( aux[0] == 13 )
      {
         value[index2] = 'D';
         index2++;
      }
      if ( aux[0] == 14 )
      {
         value[index2] = 'E';
         index2++;
      }
      if ( aux[0] == 15 )
      {
         value[index2] = 'F';
         index2++;
      }
      if ( aux[1] < 10)
      {
         value[index2] = aux[1] + '0';
         index2++;
      }
      if ( aux[1] == 10)
      {
         value[index2] = 'A';
         index2++;
      }
      if ( aux[1] == 11)
      {
         value[index2] = 'B';
         index2++;
      }
      if ( aux[1] == 12)
      {
         value[index2] = 'C';
         index2++;
      }
      if ( aux[1] == 13 )
      {
         value[index2] = 'D';
         index2++;
      }
      if ( aux[1] == 14 )
      {
         value[index2] = 'E';
         index2++;
      }
      if ( aux[1] == 15)
      {
         value[index2] = 'F';
         index2++;
      }
   }
   value[index2] = END_OF_STRING;
   return FINALIZADO;
}

int
main (int argc, char *argv[])
{
   FILE *leitura, *escrita;
   unsigned long long quantidadeBytes[2];
   unsigned int index = 0;
   tipoErros verificador;
   int quantidadeLinhas=0;
   char leitor[TAMANHO_MAXIMO];
   int verif=0;
   char aux[2];
   char verifEmpty;
   if ( argc-1 != 2)
   {
      printf (" \n\n Faltam argumentos !\n\n");
      return VALOR_FORA_DOS_PADROES;
   }
   if ( argv[1] == NULL)
   {
      printf ("\n\n Arquivo nao existe! \n\n");
      return DIMENSAO_EXCEDIDA;
   }

   leitura = fopen ( argv[1], "r");
   if ( leitura == NULL)
   {
      printf ("\n\n Arquivo nÃ£o existe! \n\n");
     return VALOR_FORA_DOS_PADROES;
   }
   fseek(leitura, 0L, SEEK_END);
   verifEmpty = ftell(leitura);
   fseek(leitura, 0L, SEEK_SET);
   if ( verifEmpty <= 1)
   {
      printf (" \n\n Arquivo vazio!\n\n");
      return VALOR_FORA_DOS_PADROES;
   }
   while (fgets(leitor, TAMANHO_MAXIMO_LINHA, leitura)) {
      quantidadeLinhas++;
   }

   fread ( leitor, 1, TAMANHO_MAXIMO_LINHA *quantidadeLinhas,leitura);

   for ( index = 0; leitor[index] != END_OF_STRING ; index++)
   {
      verif++;
   }
   verif-=1;
   char *codigo ;
   codigo = malloc(verif+1);
   fclose(leitura);
   for ( index = 0 ; index < verif  ; index++)
   {
      aux[0] = leitor[index];
      aux[1] = END_OF_STRING;
      codigo[index] = *aux;

   }
   byte *codificado;
   codificado = malloc(((verif)*2 )+1);
   codigo [index] =END_OF_STRING;
   verificador = DecodificarBase64 (codigo,1, codificado,quantidadeBytes);
   if ( verificador == entradaInvalida)
   {
      printf ( "\n\n Entrada Invalida!\n\n");
      return VALOR_FORA_DOS_PADROES;
   }

   if ( verificador == argumentoInvalido)
   {
      printf ( "\n\n Argumento Invalido detectado!\n\n");
      return VALOR_FORA_DOS_PADROES;
   }

   index = 0;
   while( codificado[index] != END_OF_STRING)
   {
      index++;
   }
   char  answer[(index)*2];
   converter(codificado, answer, quantidadeBytes[0]);
   escrita = fopen ( argv[2], "w");
   fwrite (answer, 1, strlen(answer) , escrita);
   fclose(escrita);

   printf ("\n\n FINALIZADO COM SUCESSO \n\n");

   return FINALIZADO;

}



/*$RCSfile: aula0809.c,v $ */
