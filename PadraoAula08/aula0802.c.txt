
/*Universidade Federal do Rio de Janeiro
 *Escola Politecnica
 *Departamento de Eletronica e de Computacao
 *EEL270 - Computacao II - Turma 2020/1
 *Prof. Marcelo Luiz Drumond Lanza
 *Autor: Eduardo Bruno Martins Esperanca
 *Descricao: programa de testes com a main para a funcao CODIFICAR 16BITS.
 *
 *$Author: eduardo.esperanca $
 *$Date: 2021/02/09 19:02:38 $
 *$Log: aula0802.c,v $
 *Revision 1.3  2021/02/09 19:02:38  eduardo.esperanca
 *correcao de erro do tempo no loghost.
 *
 *Revision 1.2  2021/02/09 18:51:31  eduardo.esperanca
 *mudanca do nome do arquivo de importacao para adequacao ao roteiro.
 *
 *Revision 1.1  2021/02/09 00:18:05  eduardo.esperanca
 *Initial revision
 *
 */



#include "aula08.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>



#define NUMERO_DE_ARGUMENTOS_INVALIDO 6
#define NUMERO_DE_ARGUMENTOS          4
#define END_OF_STRING                 '\0'
#define FINALIZADO                    0
#define ARGUMENTO_INVALIDO            2
#define DIMENSAO_EXCEDIDA             4
#define VALOR_FORA_DOS_PADROES        7
#define VALOR_MAXIMO_EXCEDIDO         1

int
main (int argc, char *argv[])
{
   tipoErros verificador;
   unsigned long long numeroBytes;
   int index;
   int index2 =2;
   char *verif;
   unsigned long long teste1;
   unsigned long long max = 0;
   long double teste2;
   if (argc-1 == 0 || argc-2 == 0 )
   {
      printf ("\n\n Entrada nula !\n\n");
      return VALOR_FORA_DOS_PADROES;
   }
   teste1 = conversor (argv[1],&verif,10);

   if ( *verif != END_OF_STRING)
   {
      printf ("\n\n Valor invalido em 16 bits\n\n");
      return VALOR_FORA_DOS_PADROES;
   }

   teste2 = strtod (argv[1],&verif);
   if ( *verif != END_OF_STRING)
   {
      printf ("\n\n Valor invalido em 16 bits\n\n");
      return VALOR_FORA_DOS_PADROES;
   }
   if ( teste2 > max -1 || teste2 == INFINITO || teste2 == NEGINFINITO)
   {
      printf ("\n\n Valor maximo excedido \n\n");
      return VALOR_MAXIMO_EXCEDIDO;
   }
   numeroBytes = teste1;
   if ( numeroBytes != argc -2)
   {
      printf ("\n\n Numero de argumentos n√£o bate com o de bytes! < %d >\n\n ", argc-2);
      return VALOR_FORA_DOS_PADROES;
   }
   byte *codigo;
   char *codificado;
   codigo = malloc( argc -2 +1);
   codificado = malloc ( ((argc -2)*2)+2);
   if ( 0 == argc-1 || 1 == argc-1 )
   {
      printf ("\n\n Entrada Invalida! \n\n");
      return VALOR_FORA_DOS_PADROES;
   }
   for ( index = 0 ; index < (argc-2); index++)
   {

      if ( argv[index2][0] == '-')
      {
         printf ("\n\n Valor invalido em 16 bits < - >\n\n");
         return VALOR_FORA_DOS_PADROES;
      }

      codigo[index] =  strtoul (argv[index2], &verif, 16);
      if ( strlen(argv[index2]) != 2)
      {
         printf ("\n\n Coloque dois valores por cli!\n\n");
         return VALOR_FORA_DOS_PADROES;
      }
      if ( *verif != END_OF_STRING)
      {
         printf ("\n\n Valor invalido em 16 bits\n\n");
         return VALOR_FORA_DOS_PADROES;
      }
      index2++;
   }
   codigo[index] = END_OF_STRING;
   verificador = CodificarBase16 (codigo, numeroBytes, codificado);
   if ( verificador == entradaInvalida)
   {
      printf ("\n\n Entrada Invalida detectada !\n\n");
      return VALOR_FORA_DOS_PADROES;
   }
   codificado[numeroBytes*2] = END_OF_STRING;
   printf ("\n\n\n %s \n\n\n",codificado);
   return FINALIZADO;


}



/*$RCSfile: aula0802.c,v $ */
