
/Universidade Federal do Rio de Janeiro
/Escola Politecnica
/Departamento de Eletronica e de Computacao
/EEL270 - Computacao II - Turma 2020/1 - PLE-1
/Prof. Marcelo Luiz Drumond Lanza
/Autor: Eduardo Bruno Martisn Esperanca
/Descricao: calcula mdc solicitado de dois numeros.

/$Author: eduardo.esperanca $
/$Date: 2021/01/05 02:44:22 $
/$Log: aula0302.c,v $
/Revision 1.2  2021/01/05 02:44:22  eduardo.esperanca
/Corrigido erro de core dumped.
/
/Revision 1.1  2021/01/04 00:49:16  eduardo.esperanca
/Initial revision
/
*/

#include <stdio.h> /*pritf*/
#include <stdlib.h> /*strtoul e exit*/
#include "aula0301.h" /*funcao que calcula sequencia fibonacci*/

#define finalizado  0

#include <limits.h>

#ifndef ANSI
#define ANSI 1
#endif


#define NUMERO_ARGUMENTOS_INVALIDO        1
#define VALOR_MAXIMO_EXCEDIDO             2
#define ARGUMENTO_INVALIDO                4
#define NUMERO_ARGUMENTOS                 3
#define END_OF_STRING                    '\0'
#define VALOR_INVALIDO                    0

int
protect(char checagem[])
{
   unsigned short index;
   unsigned long long maxvalue = 0;
   char verif[18];



   sprintf(verif, "%llu",(maxvalue-1));

/*le a string e compara para ver se a mesma passou do limite da variavel*/
   for(index = 0; verif[index] != END_OF_STRING || checagem[index] != END_OF_STRING; index++)
   {



      if(checagem[index] != verif[index])
      {
         /*passando do limite eh dado o aviso.*/

         return VALOR_MAXIMO_EXCEDIDO;
      }

   }
   return finalizado;
}

int
main(int argc, char *argv[])
{
   unsigned long long testeLimite2;
   unsigned long long testeLimite;
   unsigned long long referencia = 0;
   char *verificacao2;
   char *verificacao;
   ull arg1;
   ull arg2;

   if (argc != NUMERO_ARGUMENTOS)
   {
      printf ("\nNao foi possivel calcular o MDC.\n");
      printf ("\nUso: %s <inteiro-nao-negativo>\n", argv [0]);
      return (NUMERO_ARGUMENTOS_INVALIDO);

   }


   if(ANSI == 1)
   {
      testeLimite = strtoul (argv [1], &verificacao, 10);
      testeLimite2 = strtoul (argv [2], &verificacao2, 10);
   }
   else
   {
      testeLimite = strtoull (argv [1], &verificacao, 10);
      testeLimite2 = strtoull (argv [2], &verificacao2, 10);
   }

   if (argv [1][0] == '-')
   {
      printf ("Argumento invalido. Caractere invalido: '-'\n" );
      return (ARGUMENTO_INVALIDO);
   }


   if (*verificacao != END_OF_STRING)
   {
      printf ("Primeiro argumento invalido. Primeiro caractere invalido: '%c'\n", *verificacao);
      return (ARGUMENTO_INVALIDO);
   }
   if (*verificacao2 != END_OF_STRING)
   {
      printf ("Segundo argumento invalido. Primeiro caractere invalido: '%c'\n", *verificacao2);
      return (ARGUMENTO_INVALIDO);
   }

   if (  testeLimite  >=   referencia -1)
   {
      if (protect(argv[1]) != 0)
      {
         printf ("\nValor excede o maximo permitido para unsigned long long (%llu).\n\n", referencia -1 );
         return VALOR_MAXIMO_EXCEDIDO;
      }
   }

   if (  testeLimite2  >=   referencia -1)
   {
      if (protect(argv[2]) != 0)
      {
         printf ("\nValor excede o maximo permitido para unsigned long long (%llu).\n\n", referencia -1 );
         return VALOR_MAXIMO_EXCEDIDO;
      }
   }


   if(testeLimite == 0 && testeLimite2 == 0)
   {
      printf("MDC(0,0)  = 0 \nValor invalido, caso nulo (0) .\n");
      return (VALOR_INVALIDO);
   }



   if(testeLimite > testeLimite2)
   {
      arg1 = (ull) testeLimite;
      arg2 = (ull) testeLimite2;
      printf("\n MDC(%llu,%llu)  = %llu \n",arg1 , arg2, CalcularMaximoDivisorComum(arg1, arg2));
   }
   if(testeLimite < testeLimite2)
   {
      arg1 = (ull) testeLimite2;
      arg2 = (ull) testeLimite;
      printf("\n MDC(%llu,%llu)  = %llu \n",arg1 , arg2, CalcularMaximoDivisorComum(arg1, arg2));
   }



   return finalizado;
}

/*$RCSfile: aula0302.c,v $*/
